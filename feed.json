{
    "version": "https://jsonfeed.org/version/1",
    "title": "GBlog",
    "description": "",
    "home_page_url": "https://mrkintoye.name.ng",
    "feed_url": "https://mrkintoye.name.ng/feed.json",
    "user_comment": "",
    "icon": "https://mrkintoye.name.ng/media/website/myPic2-removebg-preview.png",
    "author": {
        "name": "Goke Akintoye"
    },
    "items": [
        {
            "id": "https://mrkintoye.name.ng/laravel-views-a-beginners-guide.html",
            "url": "https://mrkintoye.name.ng/laravel-views-a-beginners-guide.html",
            "title": "🖼️ Laravel Views: A Beginner’s Guide",
            "summary": "Laravel is one of the most popular PHP frameworks, and one of the things that makes it great is how it separates logic (what your app does) from presentation (what&hellip;",
            "content_html": "<p data-start=\"160\" data-end=\"373\">Laravel is one of the most popular PHP frameworks, and one of the things that makes it great is how it separates logic (what your app does) from presentation (what your users see). This is where <strong data-start=\"355\" data-end=\"364\">Views</strong> come in.</p>\n<p data-start=\"375\" data-end=\"498\">In this article, we’ll explain <strong data-start=\"406\" data-end=\"435\">what Views are in Laravel</strong>, why they’re useful, and how to use them with simple examples.</p>\n<hr data-start=\"500\" data-end=\"503\">\n<h2 data-start=\"505\" data-end=\"526\">🤔 What is a View?</h2>\n<p data-start=\"528\" data-end=\"737\">A <strong data-start=\"530\" data-end=\"538\">View</strong> in Laravel is simply a file that contains <strong data-start=\"581\" data-end=\"589\">HTML</strong> (and sometimes a bit of PHP) to display content to the user. Think of it like the <strong data-start=\"672\" data-end=\"685\">front-end</strong> of your application — the part people actually see.</p>\n<p data-start=\"739\" data-end=\"801\">Laravel stores its view files in the <code data-start=\"776\" data-end=\"793\">resources/views</code> folder.</p>\n<hr data-start=\"803\" data-end=\"806\">\n<h2 data-start=\"808\" data-end=\"837\">📁 Where Are Views Stored?</h2>\n<p data-start=\"839\" data-end=\"887\">By default, all your view files are stored here:</p>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code class=\"whitespace-pre!\">resources/views/\n</code></div>\n</div>\n<p data-start=\"915\" data-end=\"1015\">Each view is usually a <code data-start=\"938\" data-end=\"950\">.blade.php</code> file, because Laravel uses a templating engine called <strong data-start=\"1005\" data-end=\"1014\">Blade</strong>.</p>\n<p data-start=\"1017\" data-end=\"1029\">For example:</p>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code class=\"whitespace-pre!\">resources/views/welcome.blade.php\n</code></div>\n</div>\n<hr data-start=\"1073\" data-end=\"1076\">\n<h2 data-start=\"1078\" data-end=\"1106\">📄 Creating a Simple View</h2>\n<p data-start=\"1108\" data-end=\"1169\">Let’s say you want to create a page called \"hello.blade.php\".</p>\n<ol data-start=\"1171\" data-end=\"1257\">\n<li data-start=\"1171\" data-end=\"1198\">\n<p data-start=\"1174\" data-end=\"1198\">Go to <code data-start=\"1180\" data-end=\"1198\">resources/views/</code></p>\n</li>\n<li data-start=\"1199\" data-end=\"1239\">\n<p data-start=\"1202\" data-end=\"1239\">Create a file named <code data-start=\"1222\" data-end=\"1239\">hello.blade.php</code></p>\n</li>\n<li data-start=\"1240\" data-end=\"1257\">\n<p data-start=\"1243\" data-end=\"1257\">Add some HTML:</p>\n</li>\n</ol>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>&lt;!-- resources/views/hello.blade.php --&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Hello Page&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Hello, Laravel!&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></div>\n</div>\n<hr data-start=\"1433\" data-end=\"1436\">\n<h2 data-start=\"1438\" data-end=\"1473\">🚀 Returning a View from a Route</h2>\n<p data-start=\"1475\" data-end=\"1532\">Now that you have a view, how do you show it in your app?</p>\n<p data-start=\"1534\" data-end=\"1578\">Open the <code data-start=\"1543\" data-end=\"1559\">routes/web.php</code> file and add this:</p>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div dir=\"ltr\"> </div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>Route::get('/hello', function () {<br>    return view('hello');<br>});<br></code></div>\n</div>\n<p data-start=\"1657\" data-end=\"1789\">Notice that we use <code data-start=\"1676\" data-end=\"1691\">view('hello')</code> — Laravel automatically looks for a file named <code data-start=\"1739\" data-end=\"1756\">hello.blade.php</code> in the <code data-start=\"1764\" data-end=\"1781\">resources/views</code> folder.</p>\n<hr data-start=\"1791\" data-end=\"1794\">\n<h2 data-start=\"1796\" data-end=\"1824\">🧠 Passing Data to a View</h2>\n<p data-start=\"1826\" data-end=\"1890\">You can also pass data from your route to your view. Here's how:</p>\n<h3 data-start=\"1892\" data-end=\"1921\">Step 1: Update your route</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>Route::get('/greet', function () {<br>    $name = 'John';<br>    return view('greet', ['name' =&gt; $name]);<br>});<br></code></div>\n</div>\n<h3 data-start=\"2038\" data-end=\"2083\">Step 2: Create the <code data-start=\"2061\" data-end=\"2078\">greet.blade.php</code> file</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>&lt;!-- resources/views/greet.blade.php --&gt;<br>&lt;h1&gt;Hello, {{ $name }}!&lt;/h1&gt;<br></code></div>\n</div>\n<p data-start=\"2167\" data-end=\"2232\">Now, when you visit <code data-start=\"2187\" data-end=\"2195\">/greet</code>, it will display:<br data-start=\"2213\" data-end=\"2216\"><strong data-start=\"2216\" data-end=\"2232\">Hello, John!</strong></p>\n<hr data-start=\"2234\" data-end=\"2237\">\n<h2 data-start=\"2239\" data-end=\"2283\">🧩 Blade Templating: Making Views Dynamic</h2>\n<p data-start=\"2285\" data-end=\"2344\">Blade lets you use simple, readable syntax for things like:</p>\n<h3 data-start=\"2346\" data-end=\"2363\">Echoing data:</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>{{ $name }}<br></code></div>\n</div>\n<h3 data-start=\"2390\" data-end=\"2408\">If statements:</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>@if($name == 'John')<br>    &lt;p&gt;Welcome back, John!&lt;/p&gt;<br>@else<br>    &lt;p&gt;Hello, stranger!&lt;/p&gt;<br>@endif<br></code></div>\n</div>\n<h3 data-start=\"2516\" data-end=\"2526\">Loops:</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>@foreach($users as $user)<br>    &lt;p&gt;{{ $user }}&lt;/p&gt;<br>@endforeach<br></code></div>\n</div>\n<hr data-start=\"2602\" data-end=\"2605\">\n<h2 data-start=\"2607\" data-end=\"2654\">🧱 View Layouts with <code data-start=\"2631\" data-end=\"2639\">@yield</code> and <code data-start=\"2644\" data-end=\"2654\">@section</code></h2>\n<p data-start=\"2656\" data-end=\"2755\">If you have a website with a consistent layout (like a navbar and footer), you can use <strong data-start=\"2743\" data-end=\"2754\">layouts</strong>.</p>\n<h3 data-start=\"2757\" data-end=\"2785\">1. Create a layout file:</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>&lt;!-- resources/views/layouts/main.blade.php --&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;@yield('title')&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div class=\"content\"&gt;<br>        @yield('content')<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></div>\n</div>\n<h3 data-start=\"2991\" data-end=\"3033\">2. Create a view that uses the layout:</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>&lt;!-- resources/views/about.blade.php --&gt;<br>@extends('layouts.main')<br><br>@section('title', 'About Page')<br><br>@section('content')<br>    &lt;h1&gt;About Us&lt;/h1&gt;<br>    &lt;p&gt;This is the about page.&lt;/p&gt;<br>@endsection<br></code></div>\n</div>\n<p data-start=\"3237\" data-end=\"3287\">This makes your code cleaner and easier to manage.</p>\n<hr data-start=\"3289\" data-end=\"3292\">\n<h2 data-start=\"3294\" data-end=\"3307\">🧼 Summary</h2>\n<ul data-start=\"3309\" data-end=\"3573\">\n<li data-start=\"3309\" data-end=\"3351\">\n<p data-start=\"3311\" data-end=\"3351\">Views are used to display HTML to users.</p>\n</li>\n<li data-start=\"3352\" data-end=\"3382\">\n<p data-start=\"3354\" data-end=\"3382\">Stored in <code data-start=\"3364\" data-end=\"3381\">resources/views</code>.</p>\n</li>\n<li data-start=\"3383\" data-end=\"3438\">\n<p data-start=\"3385\" data-end=\"3438\">Use the <code data-start=\"3393\" data-end=\"3401\">view()</code> function to return them from routes.</p>\n</li>\n<li data-start=\"3439\" data-end=\"3515\">\n<p data-start=\"3441\" data-end=\"3515\">Use Blade syntax (<code data-start=\"3459\" data-end=\"3466\">{{ }}</code>, <code data-start=\"3468\" data-end=\"3473\">@if</code>, <code data-start=\"3475\" data-end=\"3485\">@foreach</code>, etc.) for cleaner templates.</p>\n</li>\n<li data-start=\"3516\" data-end=\"3573\">\n<p data-start=\"3518\" data-end=\"3573\">Layouts help you reuse the same structure across pages.</p>\n</li>\n</ul>\n<hr data-start=\"3575\" data-end=\"3578\">\n<h2 data-start=\"3580\" data-end=\"3594\">✅ Final Tip</h2>\n<p data-start=\"3596\" data-end=\"3649\">Whenever you’re working with Laravel Views, remember:</p>\n<ul data-start=\"3650\" data-end=\"3751\">\n<li data-start=\"3650\" data-end=\"3683\">\n<p data-start=\"3652\" data-end=\"3683\">Keep your logic in controllers,</p>\n</li>\n<li data-start=\"3684\" data-end=\"3710\">\n<p data-start=\"3686\" data-end=\"3710\">Keep your HTML in views,</p>\n</li>\n<li data-start=\"3711\" data-end=\"3751\">\n<p data-start=\"3713\" data-end=\"3751\">And keep your app clean and organized!</p>\n</li>\n</ul>\n<p data-start=\"3753\" data-end=\"3832\">Laravel views + Blade templating make building websites fast, elegant, and fun.</p>",
            "author": {
                "name": "Goke Akintoye"
            },
            "tags": [
            ],
            "date_published": "2025-10-17T10:36:46+01:00",
            "date_modified": "2025-10-18T20:24:02+01:00"
        },
        {
            "id": "https://mrkintoye.name.ng/understanding-token-abilities-and-token-ability-checks-in-laravel-sanctum.html",
            "url": "https://mrkintoye.name.ng/understanding-token-abilities-and-token-ability-checks-in-laravel-sanctum.html",
            "title": "🧠 Understanding Token Abilities and Token Ability Checks in Laravel Sanctum",
            "summary": "Laravel Sanctum allows your application to issue API tokens for authentication. Each token can have a set of abilities, which act like permissions — they define what that token is&hellip;",
            "content_html": "<p data-start=\"353\" data-end=\"561\">Laravel Sanctum allows your application to issue <strong data-start=\"402\" data-end=\"416\">API tokens</strong> for authentication.<br data-start=\"436\" data-end=\"439\">Each token can have a set of <strong data-start=\"468\" data-end=\"481\">abilities</strong>, which act like <em data-start=\"498\" data-end=\"511\">permissions</em> — they define what that token is allowed to do.</p>\n<p data-start=\"563\" data-end=\"698\">Let’s explore what token abilities are, how they work, who defines them, and how you can use them to protect routes and control access.</p>\n<hr data-start=\"700\" data-end=\"703\">\n<h2 data-start=\"705\" data-end=\"739\">🧩 1. What Are Token Abilities?</h2>\n<p data-start=\"741\" data-end=\"844\">A <strong data-start=\"743\" data-end=\"760\">token ability</strong> is a label (or tag) that specifies what actions a particular API token can perform.</p>\n<p data-start=\"846\" data-end=\"954\">Think of an ability like a <strong data-start=\"873\" data-end=\"895\">key’s access level</strong> — it tells the system what doors the key (token) can open.</p>\n<h3 data-start=\"956\" data-end=\"978\">🔍 Example Concept</h3>\n<div class=\"_tableContainer_1rjym_1\">\n<div class=\"group _tableWrapper_1rjym_13 flex w-fit flex-col-reverse\" tabindex=\"-1\">\n<table class=\"w-fit min-w-(--thread-content-width)\" data-start=\"980\" data-end=\"1312\">\n<thead data-start=\"980\" data-end=\"1033\">\n<tr data-start=\"980\" data-end=\"1033\">\n<th data-start=\"980\" data-end=\"993\" data-col-size=\"sm\">Token Name</th>\n<th data-start=\"993\" data-end=\"1005\" data-col-size=\"sm\">Abilities</th>\n<th data-start=\"1005\" data-end=\"1033\" data-col-size=\"sm\">Meaning (defined by you)</th>\n</tr>\n</thead>\n<tbody data-start=\"1091\" data-end=\"1312\">\n<tr data-start=\"1091\" data-end=\"1171\">\n<td data-start=\"1091\" data-end=\"1107\" data-col-size=\"sm\"><code data-start=\"1093\" data-end=\"1106\">admin-token</code></td>\n<td data-start=\"1107\" data-end=\"1142\" data-col-size=\"sm\"><code data-start=\"1109\" data-end=\"1141\">[\"view-users\", \"delete-users\"]</code></td>\n<td data-start=\"1142\" data-end=\"1171\" data-col-size=\"sm\">Can view and delete users</td>\n</tr>\n<tr data-start=\"1172\" data-end=\"1244\">\n<td data-start=\"1172\" data-end=\"1190\" data-col-size=\"sm\"><code data-start=\"1174\" data-end=\"1189\">cashier-token</code></td>\n<td data-col-size=\"sm\" data-start=\"1190\" data-end=\"1215\"><code data-start=\"1192\" data-end=\"1214\">[\"process-payments\"]</code></td>\n<td data-col-size=\"sm\" data-start=\"1215\" data-end=\"1244\">Can process payments only</td>\n</tr>\n<tr data-start=\"1245\" data-end=\"1312\">\n<td data-start=\"1245\" data-end=\"1265\" data-col-size=\"sm\"><code data-start=\"1247\" data-end=\"1264\">read-only-token</code></td>\n<td data-col-size=\"sm\" data-start=\"1265\" data-end=\"1283\"><code data-start=\"1267\" data-end=\"1282\">[\"view-data\"]</code></td>\n<td data-col-size=\"sm\" data-start=\"1283\" data-end=\"1312\">Can only read information</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<hr data-start=\"1314\" data-end=\"1317\">\n<h2 data-start=\"1319\" data-end=\"1363\">🧠 2. Who Determines What Abilities Mean?</h2>\n<p data-start=\"1365\" data-end=\"1481\">This is <strong data-start=\"1373\" data-end=\"1384\">crucial</strong> to understand:<br data-start=\"1399\" data-end=\"1402\">Laravel does <strong data-start=\"1415\" data-end=\"1422\">not</strong> come with any built-in abilities or predefined meanings.</p>\n<p data-start=\"1483\" data-end=\"1491\">Instead:</p>\n<blockquote data-start=\"1493\" data-end=\"1578\">\n<p data-start=\"1495\" data-end=\"1578\">🔑 <strong data-start=\"1498\" data-end=\"1578\">You, the developer, define both the names and the meanings of the abilities.</strong></p>\n</blockquote>\n<p data-start=\"1580\" data-end=\"1602\">Laravel only provides:</p>\n<ul data-start=\"1603\" data-end=\"1702\">\n<li data-start=\"1603\" data-end=\"1644\">\n<p data-start=\"1605\" data-end=\"1644\">A way to <strong data-start=\"1614\" data-end=\"1623\">store</strong> abilities on tokens.</p>\n</li>\n<li data-start=\"1645\" data-end=\"1702\">\n<p data-start=\"1647\" data-end=\"1702\">A way to <strong data-start=\"1656\" data-end=\"1665\">check</strong> if a token includes a given ability.</p>\n</li>\n</ul>\n<p data-start=\"1704\" data-end=\"1806\">It does <strong data-start=\"1712\" data-end=\"1719\">not</strong> know what <code data-start=\"1730\" data-end=\"1750\">\"admin-token\"</code> or <code data-start=\"1754\" data-end=\"1764\">\"cashier-token\"</code> means — those are just labels you invent.</p>\n<hr data-start=\"1808\" data-end=\"1811\">\n<h3 data-start=\"1813\" data-end=\"1827\">🧩 Analogy</h3>\n<p data-start=\"1829\" data-end=\"1915\">Imagine each API token as a <strong data-start=\"1857\" data-end=\"1868\">keycard</strong> and each ability as a <strong data-start=\"1891\" data-end=\"1900\">label</strong> printed on it:</p>\n<div class=\"_tableContainer_1rjym_1\">\n<div class=\"group _tableWrapper_1rjym_13 flex w-fit flex-col-reverse\" tabindex=\"-1\">\n<table class=\"w-fit min-w-(--thread-content-width)\" data-start=\"1917\" data-end=\"2111\">\n<thead data-start=\"1917\" data-end=\"1949\">\n<tr data-start=\"1917\" data-end=\"1949\">\n<th data-start=\"1917\" data-end=\"1927\" data-col-size=\"sm\">Keycard</th>\n<th data-start=\"1927\" data-end=\"1949\" data-col-size=\"md\">Labels (Abilities)</th>\n</tr>\n</thead>\n<tbody data-start=\"1984\" data-end=\"2111\">\n<tr data-start=\"1984\" data-end=\"2035\">\n<td data-start=\"1984\" data-end=\"1997\" data-col-size=\"sm\">Staff Card</td>\n<td data-start=\"1997\" data-end=\"2035\" data-col-size=\"md\">“cafeteria-access”, “office-entry”</td>\n</tr>\n<tr data-start=\"2036\" data-end=\"2111\">\n<td data-start=\"2036\" data-end=\"2051\" data-col-size=\"sm\">Manager Card</td>\n<td data-start=\"2051\" data-end=\"2111\" data-col-size=\"md\">“cafeteria-access”, “office-entry”, “server-room-access”</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p data-start=\"2113\" data-end=\"2184\">When someone tries to open the <strong data-start=\"2144\" data-end=\"2159\">server room</strong>, the system just checks:</p>\n<blockquote data-start=\"2185\" data-end=\"2243\">\n<p data-start=\"2187\" data-end=\"2243\">“Does this keycard have the ‘server-room-access’ label?”</p>\n</blockquote>\n<p data-start=\"2245\" data-end=\"2312\">It doesn’t know what a “server room” is — you defined that meaning.</p>\n<hr data-start=\"2314\" data-end=\"2317\">\n<h2 data-start=\"2319\" data-end=\"2358\">⚙️ 3. Creating Tokens With Abilities</h2>\n<p data-start=\"2360\" data-end=\"2424\">When you issue a token, you can attach specific abilities to it.</p>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>// Example: In your AuthController</code><br><code>$user = User::find(1);</code><br><br><code>// Create a token that can only view and update profile data</code><br><code>$token = $user-&gt;createToken('profile-token', ['view-profile', 'update-profile']);</code><br><br><code>// Return the token string to the client</code><br><code>return ['token' =&gt; $token-&gt;plainTextToken];</code><strong><br></strong><strong><code class=\"whitespace-pre! language-php\">\n</code></strong></div>\n</div>\n<hr data-start=\"2726\" data-end=\"2729\">\n<h3 data-start=\"2731\" data-end=\"2762\">🧠 Line-by-Line Explanation</h3>\n<div class=\"_tableContainer_1rjym_1\">\n<div class=\"group _tableWrapper_1rjym_13 flex w-fit flex-col-reverse\" tabindex=\"-1\">\n<table class=\"w-fit min-w-(--thread-content-width)\" data-start=\"2764\" data-end=\"3163\">\n<thead data-start=\"2764\" data-end=\"2786\">\n<tr data-start=\"2764\" data-end=\"2786\">\n<th data-start=\"2764\" data-end=\"2771\" data-col-size=\"md\">Code</th>\n<th data-start=\"2771\" data-end=\"2786\" data-col-size=\"md\">Explanation</th>\n</tr>\n</thead>\n<tbody data-start=\"2811\" data-end=\"3163\">\n<tr data-start=\"2811\" data-end=\"2868\">\n<td data-start=\"2811\" data-end=\"2838\" data-col-size=\"md\"><code data-start=\"2813\" data-end=\"2837\">$user = User::find(1);</code></td>\n<td data-start=\"2838\" data-end=\"2868\" data-col-size=\"md\">Get a user model instance.</td>\n</tr>\n<tr data-start=\"2869\" data-end=\"2979\">\n<td data-start=\"2869\" data-end=\"2916\" data-col-size=\"md\"><code data-start=\"2871\" data-end=\"2915\">$user-&gt;createToken('profile-token', [...])</code></td>\n<td data-start=\"2916\" data-end=\"2979\" data-col-size=\"md\">Create a new personal access token named <code data-start=\"2959\" data-end=\"2976\">'profile-token'</code>.</td>\n</tr>\n<tr data-start=\"2980\" data-end=\"3080\">\n<td data-start=\"2980\" data-end=\"3019\" data-col-size=\"md\"><code data-start=\"2982\" data-end=\"3018\">['view-profile', 'update-profile']</code></td>\n<td data-col-size=\"md\" data-start=\"3019\" data-end=\"3080\">These are labels representing <strong data-start=\"3031\" data-end=\"3044\">abilities</strong> — you define what they represent.</td>\n</tr>\n<tr data-start=\"3081\" data-end=\"3163\">\n<td data-start=\"3081\" data-end=\"3108\" data-col-size=\"md\"><code data-start=\"3083\" data-end=\"3107\">$token-&gt;plainTextToken</code></td>\n<td data-start=\"3108\" data-end=\"3163\" data-col-size=\"md\">The actual token string to be used in API requests.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p data-start=\"3165\" data-end=\"3255\">Laravel stores these abilities in the database with the token — it doesn’t interpret them.</p>\n<hr data-start=\"3257\" data-end=\"3260\">\n<h2 data-start=\"3262\" data-end=\"3315\">🔒 4. Checking Abilities in Code (Manual Checking)</h2>\n<p data-start=\"3317\" data-end=\"3422\">To verify that a token has a particular ability before allowing an action to be performed, use the <code data-start=\"3402\" data-end=\"3414\">tokenCan()</code> method.</p>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>use Illuminate\\Http\\Request;</code><br><br><code>public function updateProfile(Request $request)</code><br><code>{</code><br><code>    if (! $request-&gt;user()-&gt;tokenCan('update-profile')) {</code><br><code>        abort(403, 'Unauthorized action.');</code><br><code>    }</code><br><br><code>    // Perform profile update logic...</code><br><code>}</code></div>\n</div>\n<hr data-start=\"3666\" data-end=\"3669\">\n<h3 data-start=\"3671\" data-end=\"3699\">🧠 What’s Happening Here</h3>\n<div class=\"_tableContainer_1rjym_1\">\n<div class=\"group _tableWrapper_1rjym_13 flex w-fit flex-col-reverse\" tabindex=\"-1\">\n<table class=\"w-fit min-w-(--thread-content-width)\" data-start=\"3701\" data-end=\"4028\">\n<thead data-start=\"3701\" data-end=\"3719\">\n<tr data-start=\"3701\" data-end=\"3719\">\n<th data-start=\"3701\" data-end=\"3708\" data-col-size=\"sm\">Line</th>\n<th data-start=\"3708\" data-end=\"3719\" data-col-size=\"md\">Meaning</th>\n</tr>\n</thead>\n<tbody data-start=\"3740\" data-end=\"4028\">\n<tr data-start=\"3740\" data-end=\"3793\">\n<td data-start=\"3740\" data-end=\"3761\" data-col-size=\"sm\"><code data-start=\"3742\" data-end=\"3760\">$request-&gt;user()</code></td>\n<td data-start=\"3761\" data-end=\"3793\" data-col-size=\"md\">Gets the authenticated user.</td>\n</tr>\n<tr data-start=\"3794\" data-end=\"3910\">\n<td data-start=\"3794\" data-end=\"3825\" data-col-size=\"sm\"><code data-start=\"3796\" data-end=\"3824\">tokenCan('update-profile')</code></td>\n<td data-start=\"3825\" data-end=\"3910\" data-col-size=\"md\">Checks if the <strong data-start=\"3841\" data-end=\"3850\">token</strong> used for authentication has the <code data-start=\"3883\" data-end=\"3901\">\"update-profile\"</code> label.</td>\n</tr>\n<tr data-start=\"3911\" data-end=\"4028\">\n<td data-start=\"3911\" data-end=\"3950\" data-col-size=\"sm\"><code data-start=\"3913\" data-end=\"3949\">abort(403, 'Unauthorized action.')</code></td>\n<td data-start=\"3950\" data-end=\"4028\" data-col-size=\"md\">If the token doesn’t have the ability, return an HTTP 403 Forbidden error.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p data-start=\"4030\" data-end=\"4142\">Laravel simply checks if the string <code data-start=\"4066\" data-end=\"4084\">'update-profile'</code> exists among the token’s stored abilities — nothing more.</p>\n<hr data-start=\"4144\" data-end=\"4147\">\n<h2 data-start=\"4149\" data-end=\"4205\">🚦 5. Protecting Routes Automatically with Middleware</h2>\n<p data-start=\"4207\" data-end=\"4336\">Manual checks work fine for individual methods, but for groups of routes, Laravel Sanctum provides two convenient <strong data-start=\"4321\" data-end=\"4335\">middleware</strong>:</p>\n<div class=\"_tableContainer_1rjym_1\">\n<div class=\"group _tableWrapper_1rjym_13 flex w-fit flex-col-reverse\" tabindex=\"-1\">\n<table class=\"w-fit min-w-(--thread-content-width)\" data-start=\"4338\" data-end=\"4545\">\n<thead data-start=\"4338\" data-end=\"4363\">\n<tr data-start=\"4338\" data-end=\"4363\">\n<th data-start=\"4338\" data-end=\"4351\" data-col-size=\"sm\">Middleware</th>\n<th data-start=\"4351\" data-end=\"4363\" data-col-size=\"md\">Behavior</th>\n</tr>\n</thead>\n<tbody data-start=\"4392\" data-end=\"4545\">\n<tr data-start=\"4392\" data-end=\"4461\">\n<td data-start=\"4392\" data-end=\"4406\" data-col-size=\"sm\"><code data-start=\"4394\" data-end=\"4405\">abilities</code></td>\n<td data-start=\"4406\" data-end=\"4461\" data-col-size=\"md\">Requires the token to have <strong data-start=\"4435\" data-end=\"4442\">all</strong> listed abilities</td>\n</tr>\n<tr data-start=\"4462\" data-end=\"4545\">\n<td data-start=\"4462\" data-end=\"4474\" data-col-size=\"sm\"><code data-start=\"4464\" data-end=\"4473\">ability</code></td>\n<td data-start=\"4474\" data-end=\"4545\" data-col-size=\"md\">Requires the token to have <strong data-start=\"4503\" data-end=\"4519\">at least one</strong> of the listed abilities</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<hr data-start=\"4547\" data-end=\"4550\">\n<h3 data-start=\"4552\" data-end=\"4590\">🛠 Step 1: Register the Middleware</h3>\n<h4 data-start=\"4592\" data-end=\"4650\">Laravel 10 and earlier → add to <code data-start=\"4629\" data-end=\"4650\">app/Http/Kernel.php</code></h4>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>use Laravel\\Sanctum\\Http\\Middleware\\CheckAbilities;</code><br><code>use Laravel\\Sanctum\\Http\\Middleware\\CheckForAnyAbility;</code><br><br><code>protected $routeMiddleware = [</code><br><code>    // other middleware...</code><br><code>    'abilities' =&gt; CheckAbilities::class,</code><br><code>    'ability' =&gt; CheckForAnyAbility::class,</code><br><code>];</code></div>\n</div>\n<h4 data-start=\"4920\" data-end=\"4974\">Laravel 11 and later → add to <code data-start=\"4955\" data-end=\"4974\">bootstrap/app.php</code></h4>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>use Laravel\\Sanctum\\Http\\Middleware\\CheckAbilities;</code><br><code>use Laravel\\Sanctum\\Http\\Middleware\\CheckForAnyAbility;</code><br><code>use Illuminate\\Foundation\\Configuration\\Middleware;</code><br><br><code>$app-&gt;withMiddleware(function (Middleware $middleware) {</code><br><code>    $middleware-&gt;alias([</code><br><code>        'abilities' =&gt; CheckAbilities::class,</code><br><code>        'ability' =&gt; CheckForAnyAbility::class,</code><br><code>    ]);</code><br><code>});</code></div>\n</div>\n<p data-start=\"5337\" data-end=\"5425\">This step “teaches” Laravel to recognize the middleware names <code data-start=\"5399\" data-end=\"5410\">abilities</code> and <code data-start=\"5415\" data-end=\"5424\">ability</code>.</p>\n<hr data-start=\"5427\" data-end=\"5430\">\n<h3 data-start=\"5432\" data-end=\"5473\">🛠 Step 2: Apply Middleware to Routes</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>use App\\Http\\Controllers\\TransactionController;</code><br><code>use App\\Http\\Controllers\\WalletController;</code><br><code>use Illuminate\\Support\\Facades\\Route;</code><br><br><code>Route::middleware(['auth:sanctum', 'abilities:secret'])-&gt;group(function () {</code><br><code>    Route::post('/wallet/withdraw', [WalletController::class, 'withdrawFund']);</code><br><code>    Route::post('/payment/initiate', [TransactionController::class, 'initTransaction']);</code><br><code>    Route::get('/transaction/verify/{id}', [TransactionController::class, 'verifyTransaction']);</code><br><code>});</code></div>\n</div>\n<hr data-start=\"5964\" data-end=\"5967\">\n<h3 data-start=\"5969\" data-end=\"5987\">🧠 Explanation</h3>\n<div class=\"_tableContainer_1rjym_1\">\n<div class=\"group _tableWrapper_1rjym_13 flex w-fit flex-col-reverse\" tabindex=\"-1\">\n<table class=\"w-fit min-w-(--thread-content-width)\" data-start=\"5989\" data-end=\"6254\">\n<thead data-start=\"5989\" data-end=\"6007\">\n<tr data-start=\"5989\" data-end=\"6007\">\n<th data-start=\"5989\" data-end=\"5996\" data-col-size=\"sm\">Code</th>\n<th data-start=\"5996\" data-end=\"6007\" data-col-size=\"md\">Meaning</th>\n</tr>\n</thead>\n<tbody data-start=\"6028\" data-end=\"6254\">\n<tr data-start=\"6028\" data-end=\"6096\">\n<td data-start=\"6028\" data-end=\"6045\" data-col-size=\"sm\"><code data-start=\"6030\" data-end=\"6044\">auth:sanctum</code></td>\n<td data-col-size=\"md\" data-start=\"6045\" data-end=\"6096\">Ensures the request uses a valid Sanctum token.</td>\n</tr>\n<tr data-start=\"6097\" data-end=\"6172\">\n<td data-start=\"6097\" data-end=\"6118\" data-col-size=\"sm\"><code data-start=\"6099\" data-end=\"6117\">abilities:secret</code></td>\n<td data-start=\"6118\" data-end=\"6172\" data-col-size=\"md\">Ensures the token includes the <code data-start=\"6151\" data-end=\"6161\">\"secret\"</code> ability.</td>\n</tr>\n<tr data-start=\"6173\" data-end=\"6254\">\n<td data-start=\"6173\" data-end=\"6191\" data-col-size=\"sm\">Grouping routes</td>\n<td data-start=\"6191\" data-end=\"6254\" data-col-size=\"md\">All routes inside share the same restriction automatically.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p data-start=\"6256\" data-end=\"6342\">Laravel doesn’t interpret <code data-start=\"6282\" data-end=\"6292\">\"secret\"</code> — it simply checks if the token <em data-start=\"6325\" data-end=\"6330\">has</em> that label.</p>\n<hr data-start=\"6344\" data-end=\"6347\">\n<h3 data-start=\"6349\" data-end=\"6394\">Example Using <code data-start=\"6367\" data-end=\"6376\">ability</code> (any one of them)</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>Route::middleware(['auth:sanctum', 'ability:view-transactions,verify-transactions'])-&gt;group(function () {<br>    Route::get('/transaction/{id}', [TransactionController::class, 'getTransaction']);<br>});<br></code></div>\n</div>\n<p data-start=\"6605\" data-end=\"6717\">This route will be accessible to any token that has <strong data-start=\"6657\" data-end=\"6667\">either</strong> <code data-start=\"6668\" data-end=\"6689\">\"view-transactions\"</code> or <code data-start=\"6693\" data-end=\"6716\">\"verify-transactions\"</code>.</p>\n<hr data-start=\"6719\" data-end=\"6722\">\n<h2 data-start=\"6724\" data-end=\"6750\">🧾 6. Full Example Flow</h2>\n<h3 data-start=\"6752\" data-end=\"6798\">Step 1 — Create Tokens for Different Roles</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>// Admin user</code><br><code>$adminToken = $user-&gt;createToken('admin', ['manage-users', 'process-payments']);</code><br><br><code>// Customer user</code><br><code>$userToken = $user-&gt;createToken('customer', ['view-transactions']);</code></div>\n</div>\n<hr data-start=\"6993\" data-end=\"6996\">\n<h3 data-start=\"6998\" data-end=\"7025\">Step 2 — Protect Routes</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code>Route::middleware(['auth:sanctum', 'abilities:process-payments'])-&gt;group(function () {<br>    Route::post('/payments', [PaymentController::class, 'process']);<br>});<br></code></div>\n</div>\n<p data-start=\"7199\" data-end=\"7333\">✅ The <strong data-start=\"7205\" data-end=\"7220\">admin token</strong> (has <code data-start=\"7226\" data-end=\"7244\">process-payments</code>) → can access<br data-start=\"7258\" data-end=\"7261\">❌ The <strong data-start=\"7267\" data-end=\"7285\">customer token</strong> (no <code data-start=\"7290\" data-end=\"7308\">process-payments</code>) → gets 403 Unauthorized</p>\n<hr data-start=\"7335\" data-end=\"7338\">\n<h2 data-start=\"7340\" data-end=\"7374\">⚡ 7. Why Token Abilities Matter</h2>\n<div class=\"_tableContainer_1rjym_1\">\n<div class=\"group _tableWrapper_1rjym_13 flex w-fit flex-col-reverse\" tabindex=\"-1\">\n<table class=\"w-fit min-w-(--thread-content-width)\" data-start=\"7376\" data-end=\"7723\">\n<thead data-start=\"7376\" data-end=\"7396\">\n<tr data-start=\"7376\" data-end=\"7396\">\n<th data-start=\"7376\" data-end=\"7385\" data-col-size=\"sm\">Reason</th>\n<th data-start=\"7385\" data-end=\"7396\" data-col-size=\"md\">Benefit</th>\n</tr>\n</thead>\n<tbody data-start=\"7419\" data-end=\"7723\">\n<tr data-start=\"7419\" data-end=\"7495\">\n<td data-start=\"7419\" data-end=\"7449\" data-col-size=\"sm\"><strong data-start=\"7421\" data-end=\"7448\">Granular access control</strong></td>\n<td data-col-size=\"md\" data-start=\"7449\" data-end=\"7495\">You can allow or block tokens per feature.</td>\n</tr>\n<tr data-start=\"7496\" data-end=\"7566\">\n<td data-start=\"7496\" data-end=\"7511\" data-col-size=\"sm\"><strong data-start=\"7498\" data-end=\"7510\">Security</strong></td>\n<td data-start=\"7511\" data-end=\"7566\" data-col-size=\"md\">If a token is compromised, its actions are limited.</td>\n</tr>\n<tr data-start=\"7567\" data-end=\"7629\">\n<td data-start=\"7567\" data-end=\"7585\" data-col-size=\"sm\"><strong data-start=\"7569\" data-end=\"7584\">Scalability</strong></td>\n<td data-start=\"7585\" data-end=\"7629\" data-col-size=\"md\">Easy to add or change permissions later.</td>\n</tr>\n<tr data-start=\"7630\" data-end=\"7723\">\n<td data-start=\"7630\" data-end=\"7650\" data-col-size=\"sm\"><strong data-start=\"7632\" data-end=\"7649\">Best practice</strong></td>\n<td data-col-size=\"md\" data-start=\"7650\" data-end=\"7723\">Follows the “principle of least privilege” (give only what’s needed).</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<hr data-start=\"7725\" data-end=\"7728\">\n<h2 data-start=\"7730\" data-end=\"7742\">✅ Summary</h2>\n<div class=\"_tableContainer_1rjym_1\">\n<div class=\"group _tableWrapper_1rjym_13 flex w-fit flex-col-reverse\" tabindex=\"-1\">\n<table class=\"w-fit min-w-(--thread-content-width)\" data-start=\"7744\" data-end=\"8324\">\n<thead data-start=\"7744\" data-end=\"7769\">\n<tr data-start=\"7744\" data-end=\"7769\">\n<th data-start=\"7744\" data-end=\"7754\" data-col-size=\"sm\">Concept</th>\n<th data-start=\"7754\" data-end=\"7769\" data-col-size=\"md\">Description</th>\n</tr>\n</thead>\n<tbody data-start=\"7798\" data-end=\"8324\">\n<tr data-start=\"7798\" data-end=\"7889\">\n<td data-start=\"7798\" data-end=\"7820\" data-col-size=\"sm\"><strong data-start=\"7800\" data-end=\"7819\">Token Abilities</strong></td>\n<td data-col-size=\"md\" data-start=\"7820\" data-end=\"7889\">Labels (strings) that define what a token can do — chosen by you.</td>\n</tr>\n<tr data-start=\"7890\" data-end=\"7983\">\n<td data-start=\"7890\" data-end=\"7919\" data-col-size=\"sm\"><strong data-start=\"7892\" data-end=\"7918\">Who defines abilities?</strong></td>\n<td data-start=\"7919\" data-end=\"7983\" data-col-size=\"md\">You do — Laravel doesn’t interpret or enforce their meaning.</td>\n</tr>\n<tr data-start=\"7984\" data-end=\"8070\">\n<td data-start=\"7984\" data-end=\"8003\" data-col-size=\"sm\"><strong data-start=\"7986\" data-end=\"8002\"><code data-start=\"7988\" data-end=\"8000\">tokenCan()</code></strong></td>\n<td data-start=\"8003\" data-end=\"8070\" data-col-size=\"md\">Checks if a token has a specific ability (used in controllers).</td>\n</tr>\n<tr data-start=\"8071\" data-end=\"8153\">\n<td data-start=\"8071\" data-end=\"8101\" data-col-size=\"sm\"><strong data-start=\"8073\" data-end=\"8100\"><code data-start=\"8075\" data-end=\"8087\">abilities:</code> middleware</strong></td>\n<td data-col-size=\"md\" data-start=\"8101\" data-end=\"8153\">Requires a token to have <em data-start=\"8128\" data-end=\"8133\">all</em> listed abilities.</td>\n</tr>\n<tr data-start=\"8154\" data-end=\"8241\">\n<td data-start=\"8154\" data-end=\"8182\" data-col-size=\"sm\"><strong data-start=\"8156\" data-end=\"8181\"><code data-start=\"8158\" data-end=\"8168\">ability:</code> middleware</strong></td>\n<td data-start=\"8182\" data-end=\"8241\" data-col-size=\"md\">Requires a token to have <em data-start=\"8209\" data-end=\"8223\">at least one</em> listed ability.</td>\n</tr>\n<tr data-start=\"8242\" data-end=\"8324\">\n<td data-start=\"8242\" data-end=\"8256\" data-col-size=\"sm\"><strong data-start=\"8244\" data-end=\"8255\">Purpose</strong></td>\n<td data-col-size=\"md\" data-start=\"8256\" data-end=\"8324\">Restrict what tokens can do, improving security and flexibility.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<hr data-start=\"8326\" data-end=\"8329\">\n<h3 data-start=\"8331\" data-end=\"8353\">🔐 In One Sentence</h3>\n<blockquote data-start=\"8355\" data-end=\"8544\">\n<p data-start=\"8357\" data-end=\"8544\"><strong data-start=\"8357\" data-end=\"8544\">Laravel Sanctum token abilities are developer-defined permission tags attached to tokens, checked by Laravel using simple string comparison to decide what each token is allowed to do.</strong></p>\n</blockquote>",
            "author": {
                "name": "Goke Akintoye"
            },
            "tags": [
            ],
            "date_published": "2025-10-17T04:46:30+01:00",
            "date_modified": "2025-10-17T04:58:00+01:00"
        },
        {
            "id": "https://mrkintoye.name.ng/frankenphp-2.html",
            "url": "https://mrkintoye.name.ng/frankenphp-2.html",
            "title": "FrankenPHP",
            "summary": "In this post, we'll be looking at FrankenPHP. A modern, high-performance PHP application server and runtime designed to serve PHP applications without relying on traditional web servers like Apache or&hellip;",
            "content_html": "<p data-start=\"0\" data-end=\"309\">In this post, we'll be looking at <strong data-start=\"0\" data-end=\"14\">FrankenPHP.</strong> A modern, high-performance PHP application server and runtime designed to serve PHP applications <em data-start=\"115\" data-end=\"180\">without relying on traditional web servers like Apache or Nginx</em>. It aims to simplify PHP deployment while improving performance, especially for modern apps like those using Laravel or Symfony.</p>\n<hr data-start=\"311\" data-end=\"314\">\n<h3 data-start=\"316\" data-end=\"342\">🔧 What is FrankenPHP?</h3>\n<p data-start=\"344\" data-end=\"358\">FrankenPHP is:</p>\n<ul data-start=\"360\" data-end=\"788\">\n<li data-start=\"360\" data-end=\"418\">\n<p data-start=\"362\" data-end=\"418\"><strong data-start=\"362\" data-end=\"382\">A PHP web server</strong>: It can run your PHP code directly.</p>\n</li>\n<li data-start=\"419\" data-end=\"526\">\n<p data-start=\"421\" data-end=\"526\"><strong data-start=\"421\" data-end=\"441\">Built with Caddy</strong>: A popular Go-based web server known for its simplicity and automatic HTTPS support.</p>\n</li>\n<li data-start=\"527\" data-end=\"633\">\n<p data-start=\"529\" data-end=\"633\"><strong data-start=\"529\" data-end=\"545\">Embedded PHP</strong>: It embeds the PHP engine in the web server itself, eliminating the need for <code data-start=\"623\" data-end=\"632\">php-fpm</code>.</p>\n</li>\n<li data-start=\"634\" data-end=\"788\">\n<p data-start=\"636\" data-end=\"788\"><strong data-start=\"636\" data-end=\"663\">Async / Worker-Friendly</strong>: It supports long-running worker processes (like Laravel Octane), WebSockets, HTTP/2, and Server-Sent Events out of the box.</p>\n</li>\n</ul>\n<hr data-start=\"790\" data-end=\"793\">\n<h3 data-start=\"795\" data-end=\"821\">💡 Why Use FrankenPHP?</h3>\n<div class=\"_tableContainer_1rjym_1\">\n<div class=\"group _tableWrapper_1rjym_13 flex w-fit flex-col-reverse\" tabindex=\"-1\">\n<table class=\"w-fit min-w-(--thread-content-width)\" data-start=\"823\" data-end=\"1320\">\n<thead data-start=\"823\" data-end=\"894\">\n<tr data-start=\"823\" data-end=\"894\">\n<th data-start=\"823\" data-end=\"855\" data-col-size=\"sm\">Traditional Stack</th>\n<th data-start=\"855\" data-end=\"894\" data-col-size=\"sm\">FrankenPHP</th>\n</tr>\n</thead>\n<tbody data-start=\"966\" data-end=\"1320\">\n<tr data-start=\"966\" data-end=\"1036\">\n<td data-start=\"966\" data-end=\"997\" data-col-size=\"sm\">Nginx/Apache + PHP-FPM</td>\n<td data-start=\"997\" data-end=\"1036\" data-col-size=\"sm\">Just FrankenPHP (no FPM needed)</td>\n</tr>\n<tr data-start=\"1037\" data-end=\"1107\">\n<td data-start=\"1037\" data-end=\"1068\" data-col-size=\"sm\">Separate server config</td>\n<td data-start=\"1068\" data-end=\"1107\" data-col-size=\"sm\">Everything in one place</td>\n</tr>\n<tr data-start=\"1108\" data-end=\"1178\">\n<td data-start=\"1108\" data-end=\"1139\" data-col-size=\"sm\">Manual HTTPS setup</td>\n<td data-start=\"1139\" data-end=\"1178\" data-col-size=\"sm\">Automatic HTTPS via Caddy</td>\n</tr>\n<tr data-start=\"1179\" data-end=\"1249\">\n<td data-start=\"1179\" data-end=\"1210\" data-col-size=\"sm\">Slow cold starts (FPM)</td>\n<td data-start=\"1210\" data-end=\"1249\" data-col-size=\"sm\">Persistent workers = faster apps</td>\n</tr>\n<tr data-start=\"1250\" data-end=\"1320\">\n<td data-start=\"1250\" data-end=\"1281\" data-col-size=\"sm\">Harder async/WebSocket setup</td>\n<td data-start=\"1281\" data-end=\"1320\" data-col-size=\"sm\">Native support</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<hr data-start=\"1322\" data-end=\"1325\">\n<h3 data-start=\"1327\" data-end=\"1344\">🛠️ Use Cases</h3>\n<ul data-start=\"1346\" data-end=\"1560\">\n<li data-start=\"1346\" data-end=\"1390\">\n<p data-start=\"1348\" data-end=\"1390\"><strong data-start=\"1348\" data-end=\"1390\">Laravel, Symfony, or WordPress hosting</strong></p>\n</li>\n<li data-start=\"1391\" data-end=\"1435\">\n<p data-start=\"1393\" data-end=\"1435\"><strong data-start=\"1393\" data-end=\"1435\">Server-Sent Events (SSE) or WebSockets</strong></p>\n</li>\n<li data-start=\"1436\" data-end=\"1463\">\n<p data-start=\"1438\" data-end=\"1463\"><strong data-start=\"1438\" data-end=\"1463\">Microservices or APIs</strong></p>\n</li>\n<li data-start=\"1464\" data-end=\"1516\">\n<p data-start=\"1466\" data-end=\"1516\"><strong data-start=\"1466\" data-end=\"1516\">Running PHP without setting up Nginx or Apache</strong></p>\n</li>\n<li data-start=\"1517\" data-end=\"1560\">\n<p data-start=\"1519\" data-end=\"1560\"><strong data-start=\"1519\" data-end=\"1560\">Building Docker images for PHP easily</strong></p>\n</li>\n</ul>\n<hr data-start=\"1562\" data-end=\"1565\">\n<h3 data-start=\"1567\" data-end=\"1586\">🚀 Key Features</h3>\n<ul data-start=\"1588\" data-end=\"1830\">\n<li data-start=\"1588\" data-end=\"1622\">\n<p data-start=\"1590\" data-end=\"1622\">✅ Native HTTP server (via Caddy)</p>\n</li>\n<li data-start=\"1623\" data-end=\"1652\">\n<p data-start=\"1625\" data-end=\"1652\">✅ Runs PHP scripts directly</p>\n</li>\n<li data-start=\"1653\" data-end=\"1695\">\n<p data-start=\"1655\" data-end=\"1695\">✅ Async features (e.g., SSE, WebSockets)</p>\n</li>\n<li data-start=\"1696\" data-end=\"1739\">\n<p data-start=\"1698\" data-end=\"1739\">✅ Better performance (persistent workers)</p>\n</li>\n<li data-start=\"1740\" data-end=\"1774\">\n<p data-start=\"1742\" data-end=\"1774\">✅ Compatible with PHP frameworks</p>\n</li>\n<li data-start=\"1775\" data-end=\"1791\">\n<p data-start=\"1777\" data-end=\"1791\">✅ Docker-ready</p>\n</li>\n<li data-start=\"1792\" data-end=\"1830\">\n<p data-start=\"1794\" data-end=\"1830\">✅ Automatic HTTPS with Let's Encrypt</p>\n</li>\n</ul>\n<hr data-start=\"1832\" data-end=\"1835\">\n<h3 data-start=\"1837\" data-end=\"1865\">🔍 How It Works (Simply)</h3>\n<ul data-start=\"1867\" data-end=\"2141\">\n<li data-start=\"1867\" data-end=\"1897\">\n<p data-start=\"1869\" data-end=\"1897\">Caddy handles HTTP requests.</p>\n</li>\n<li data-start=\"1898\" data-end=\"1934\">\n<p data-start=\"1900\" data-end=\"1934\">PHP is embedded directly in Caddy.</p>\n</li>\n<li data-start=\"1935\" data-end=\"2027\">\n<p data-start=\"1937\" data-end=\"2027\">Your PHP code runs immediately, without needing to be passed through FPM or another proxy.</p>\n</li>\n<li data-start=\"2028\" data-end=\"2141\">\n<p data-start=\"2030\" data-end=\"2141\">FrankenPHP manages lifecycle, workers, and memory, letting you keep services running across requests if needed.</p>\n</li>\n</ul>\n<hr data-start=\"2143\" data-end=\"2146\">\n<h3 data-start=\"2148\" data-end=\"2175\">🐳 Example Docker Usage</h3>\n<div class=\"contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary\">\n<div class=\"sticky top-9\">\n<div class=\"absolute end-0 bottom-0 flex h-9 items-center pe-2\">\n<div class=\"bg-token-bg-elevated-secondary text-token-text-secondary flex items-center gap-4 rounded-sm px-2 font-sans text-xs\"> </div>\n</div>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code class=\"whitespace-pre! language-Dockerfile\">FROM dunglas/frankenphp\n\nCOPY . /app\nWORKDIR /app\n\n# Serve your Laravel/Symfony app\nCMD [\"frankenphp\", \"--config\", \"/app/Caddyfile\"]\n</code></div>\n</div>\n<hr data-start=\"2329\" data-end=\"2332\">\n<h3 data-start=\"2334\" data-end=\"2356\">📚 Getting Started</h3>\n<ul data-start=\"2358\" data-end=\"2569\">\n<li data-start=\"2358\" data-end=\"2427\">\n<p data-start=\"2360\" data-end=\"2427\"><strong data-start=\"2360\" data-end=\"2377\">Official site</strong>: <a data-start=\"2379\" data-end=\"2427\" rel=\"noopener\" target=\"_new\" class=\"decorated-link cursor-pointer\">https://frankenphp.dev<svg width=\"20\" height=\"20\" viewbox=\"0 0 20 20\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" data-rtl-flip=\"\" class=\"block h-[0.75em] w-[0.75em] stroke-current stroke-[0.75]\"><path d=\"M14.3349 13.3301V6.60645L5.47065 15.4707C5.21095 15.7304 4.78895 15.7304 4.52925 15.4707C4.26955 15.211 4.26955 14.789 4.52925 14.5293L13.3935 5.66504H6.66011C6.29284 5.66504 5.99507 5.36727 5.99507 5C5.99507 4.63273 6.29284 4.33496 6.66011 4.33496H14.9999L15.1337 4.34863C15.4369 4.41057 15.665 4.67857 15.665 5V13.3301C15.6649 13.6973 15.3672 13.9951 14.9999 13.9951C14.6327 13.9951 14.335 13.6973 14.3349 13.3301Z\"></path></svg></a></p>\n</li>\n<li data-start=\"2428\" data-end=\"2525\">\n<p data-start=\"2430\" data-end=\"2525\"><strong data-start=\"2430\" data-end=\"2445\">GitHub repo</strong>: <a href=\"https://github.com/dunglas/frankenphp\" data-start=\"2447\" data-end=\"2525\"  target=\"_new\"   rel=\"noopener\">https://github.com/dunglas/frankenphp<svg width=\"20\" height=\"20\" viewbox=\"0 0 20 20\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" data-rtl-flip=\"\" class=\"block h-[0.75em] w-[0.75em] stroke-current stroke-[0.75]\"><path d=\"M14.3349 13.3301V6.60645L5.47065 15.4707C5.21095 15.7304 4.78895 15.7304 4.52925 15.4707C4.26955 15.211 4.26955 14.789 4.52925 14.5293L13.3935 5.66504H6.66011C6.29284 5.66504 5.99507 5.36727 5.99507 5C5.99507 4.63273 6.29284 4.33496 6.66011 4.33496H14.9999L15.1337 4.34863C15.4369 4.41057 15.665 4.67857 15.665 5V13.3301C15.6649 13.6973 15.3672 13.9951 14.9999 13.9951C14.6327 13.9951 14.335 13.6973 14.3349 13.3301Z\"></path></svg></a></p>\n</li>\n<li data-start=\"2526\" data-end=\"2569\">\n<p data-start=\"2528\" data-end=\"2569\">Install via Docker, or build from source.</p>\n</li>\n</ul>\n<hr data-start=\"2571\" data-end=\"2574\">\n<h3 data-start=\"2576\" data-end=\"2612\">🔄 FrankenPHP vs Laravel Octane?</h3>\n<ul data-start=\"2614\" data-end=\"2787\">\n<li data-start=\"2614\" data-end=\"2657\">\n<p data-start=\"2616\" data-end=\"2657\"><strong data-start=\"2616\" data-end=\"2626\">Octane</strong> requires Swoole or RoadRunner.</p>\n</li>\n<li data-start=\"2658\" data-end=\"2730\">\n<p data-start=\"2660\" data-end=\"2730\"><strong data-start=\"2660\" data-end=\"2674\">FrankenPHP</strong> works out-of-the-box, no PHP extensions or extra tools.</p>\n</li>\n<li data-start=\"2731\" data-end=\"2787\">\n<p data-start=\"2733\" data-end=\"2787\">Both enable persistent workers and speed improvements.</p>\n</li>\n</ul>",
            "author": {
                "name": "Goke Akintoye"
            },
            "tags": [
            ],
            "date_published": "2025-10-16T22:51:28+01:00",
            "date_modified": "2025-10-16T22:51:28+01:00"
        },
        {
            "id": "https://mrkintoye.name.ng/typescripts-generics-in-short.html",
            "url": "https://mrkintoye.name.ng/typescripts-generics-in-short.html",
            "title": "TypeScript&#x27;s Generics In Short",
            "summary": "TypeScript generics allow you to create reusable and flexible code by abstracting over types. It enables you to write code that can work with different types without explicitly specifying them.",
            "content_html": "\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/22/GENERICS2.png\" height=\"283\" width=\"1061\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/22/responsive/GENERICS2-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/22/responsive/GENERICS2-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/22/responsive/GENERICS2-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/22/responsive/GENERICS2-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/22/responsive/GENERICS2-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/22/responsive/GENERICS2-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    TypeScript generics allow you to create reusable and flexible code by abstracting over types. It enables you to write code that can work with different types without explicitly specifying them.\n  </p>\n\n  <p>\n    Generics are defined using angle brackets (&lt; &gt;) and can be applied to functions, classes, and interfaces. They are represented by a placeholder type parameter, commonly denoted as T. This placeholder can be replaced with any type when the generic code is used.\n  </p>\n\n  <p>\n    Here's a simple example to illustrate TypeScript generics:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>// A generic function that swaps the positions of two elements in an array\nfunction swap&lt;T&gt;(arr: T[], i: number, j: number): void {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}\n\n// Usage\nconst numbers = [1, 2, 3, 4];\nswap&lt;number&gt;(numbers, 1, 3);\nconsole.log(numbers); // Output: [1, 4, 3, 2]\n\nconst strings = ['apple', 'banana', 'cherry'];\nswap&lt;string&gt;(strings, 0, 2);\nconsole.log(strings); // Output: ['cherry', 'banana', 'apple']\n</code></pre>\n\n  <p>\n    In this example, the swap function uses a generic type T to indicate that it can work with any type. When calling the function, you specify the actual type you want to use (e.g., number or string) within angle brackets.\n<br>\n<br>By using generics, you can create reusable code that works with different types while maintaining type safety.\n  </p>",
            "author": {
                "name": "Goke Akintoye"
            },
            "tags": [
            ],
            "date_published": "2023-09-01T13:35:48+01:00",
            "date_modified": "2023-09-01T14:04:51+01:00"
        },
        {
            "id": "https://mrkintoye.name.ng/setting-up-auto-linting-and-formatting-for-typescript-in-vs-code.html",
            "url": "https://mrkintoye.name.ng/setting-up-auto-linting-and-formatting-for-typescript-in-vs-code.html",
            "title": "Setting Up TypeScript Code Auto Linting And Formatting For VS Code",
            "summary": "Intro: The combination of TypeScript and the VS Code IDE is a match made in heaven. Compared to other IDEs and code editors, using VS Code to develop your TypeScript&hellip;",
            "content_html": "\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/20/test4b.png\" height=\"769\" width=\"790\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/20/responsive/test4b-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/20/responsive/test4b-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/20/responsive/test4b-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/20/responsive/test4b-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/20/responsive/test4b-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/20/responsive/test4b-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    <strong>Intro: </strong>The combination of TypeScript and the VS Code IDE is a match made in heaven. Compared to other IDEs and code editors, using VS Code to develop your TypeScript application makes things easier once you've completed the necessary setup.\n<br>\n<br>This guide will show you how to set up your dev environment to automatically format your code to conform to a pre-defined format. This is useful, for example, when working as part of a software development team, so that your code is formatted uniformly and in an expected format. Your code will also be readable. We'll also implement a linter to catch bugs in our code early.\n  </p>\n\n  <p>\n    Prerequisites:\n  </p>\n\n  <ul>\n    <li>&nbsp;I assume you've already install VS Code, if you haven't, you can do so by downloading VS Code here for your OS and follow the installation instruction.</li><li>&nbsp;You should also have installed Node in other to use npm (Node Package Manager). You can get Node here for installation if you haven't installed it yet. Be sure to choose the LTS version.</li><li>&nbsp;I also assume you already know how to set up a TypeScript project using VS Code combined with maybe Webpack and Babel. You may want to checkout my post on this topic here.</li>\n  </ul>\n\n  <p>\n    Let's get started.\n  </p>\n<div><div  style=\"width:750px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs.html\"></div>&nbsp;\n</div>\n\n  <p>\n    <strong>Step 1: Create a Project Folder:\n<br></strong>\n<br>We start by creating a folder for our project; we'll call this folder <strong>lpts</strong>, you're free to give it any name you want. Right-click on the folder and select <strong>Open with code</strong> option to open it in VS Code. Once the folder is open in VS Code you can move to the next step.\n  </p>\n\n  <p>\n    <strong>Step 2: Initialize the Project:\n<br></strong>\n<br>Initialize the project by running the following command from within the VS Code command line tool (Locate the tool by selecting the Terminal menu at the top and choosing the the New Terminal option).\n  </p>\n<pre class=\"line-numbers  language-html\"><code>npm init -y</code></pre>\n\n  <p>\n    <mark>NOTE: Always remember to press the ENTER key after entering a command in order to run it.</mark>\n  </p>\n\n  <p>\n    After running this command, the project folder should now contain a <strong>package.json</strong> file.\n  </p>\n<div><div  style=\"width:750px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs1.html\"></div>&nbsp;\n</div>\n\n  <p>\n    <strong>Step 3: Install ESLint :\n<br></strong>\n<br>ESLint will help us to detect bugs or error and may also point us to inefficient part of our code.\n<br>\n<br>To install it run the following command:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>npm install --save-dev --save-exact eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-airbnb</code></pre>\n\n  <p>\n    Once the above command is successful, ESLint and its associated tools will appear in our package.json file.\n  </p>\n\n  <p>\n    <strong>Step 4: Install Prettier :\n<br></strong>\n<br>Prettier helps us to format our code based on the rules we give it, making it properly laid out. We will also configure Prettier such that it can do this magic automatically each time we save our code.\n<br>\n<br>To install Prettier let's run the following command:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>npm install --save-dev --save-exact prettier</code></pre>\n<div><div  style=\"width:750px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs2.html\"></div>&nbsp;\n</div>\n\n  <p>\n    <strong>Step 5: Create .prettierrc file:</strong>\n<br>\n<br>The rules that guides how Prettier formats our code is usually contain in a <strong>.prettierrc</strong> file usually located at the root of our project folder. Create the file and copy, paste, and save the rules below into the file:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>{\n\"printWidth\": 100,\n\"singleQuote\": true,\n\"semi\": true,\n\"tabWidth\": 2,\n\"trailingComma\": \"all\",\n\"endOfLine\": \"auto\"\n}</code></pre>\n\n  <p>\n    \n  </p>\n\n  <p>\n    <strong>Step 6: Create .eslintrc.json file:\n<br></strong>\n<br>The .eslintrc.json file is used to hold the configuration details for ESLint. \n<br>\n<br>Create a file in the project folder and name it <strong>.eslintrc.json</strong> . Copy, paste and save the code below into it:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>{\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"airbnb\",\n    \"plugin:prettier/recommended\",\n    \"prettier/@typescript-eslint\"\n  ],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\"@typescript-eslint\", \"prettier\"],\n  \"rules\": {\n    \"prettier/prettier\": \"error\",\n    \"@typescript-eslint/indent\": [\"error\", 2],\n    \"@typescript-eslint/no-unused-vars\": \"error\",\n    \"@typescript-eslint/no-explicit-any\": \"error\"\n  }</code></pre>\n\n  <p>\n    We now have the tools we need installed together with their respective configuration files. The next step is to link VS Code with these tools so that we can use them automatically while writing our code rather having to manually use the command line to invoke them each time we want lint or format our code.\n  </p>\n<div><div  style=\"width:750px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs3.html\"></div>&nbsp;\n</div>\n\n  <p>\n    <strong>Step 7: Install Prettier Plugin for VS Code :\n<br></strong>\n<br>To install this plugin, in VS Code, click the Extension button, labelled 1 in the image below, and enter the word <strong>Prettier </strong>to search for the plugin. Other plugins with similar name may appear but what we want is the one named <strong>Prettier - Code Formatter</strong>. Click on it to be sure you're selecting the right plugin and then click the install button to install it.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/20/2023-08-17-23-xl.webp\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-23-xl-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-23-xl-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-23-xl-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-23-xl-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-23-xl-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-23-xl-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    After installation move to the next step.\n  </p>\n\n  <p>\n    <strong>Step 8: Install ESLint Plugin for VS Code :\n<br></strong>\n<br>To install this plugin, follow the same steps above for the Prettier plugin but this time search for the <strong>ESLint </strong>plugin as shown below. Of course, once you've located the plugin,  install it.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/20/2023-08-17-24-2-xl.webp\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-24-2-xl-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-24-2-xl-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-24-2-xl-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-24-2-xl-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-24-2-xl-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-24-2-xl-2xl.webp 1920w\">\n      \n    </figure>\n<div><div  style=\"width:750px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs4.html\"></div>&nbsp;\n</div>\n\n  <p>\n    <strong>Step 9: Configure Code Auto Formatting:\n<br></strong>\n<br> What we want to do next is set things up such that each time we save our code in VS Code Prettier should automatically format our code for us.\n<br>\n<br>To do this, in VS Code, go to <strong>File &gt; Preferences &gt; Settings</strong> as shown in the image below:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/20/2023-08-17-14-xl.webp\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-14-xl-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-14-xl-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-14-xl-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-14-xl-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-14-xl-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-14-xl-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    After clicking on settings , the setting page should open as shown below:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/20/2023-08-18-xl.webp\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-xl-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-xl-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-xl-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-xl-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-xl-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-xl-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    Following the cue in the diagram above, enter <strong>Format on save</strong> in the search box, select the <strong>Workspace </strong>tab is selected, then ensure that the checkbox under <strong>Editor: Format On Save</strong> is checked.\n<br>\n<br>Lastly for this step, type <strong>Default Formatter</strong> into the search box and the page should display as below:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/20/2023-08-18-1-xl.webp\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-1-xl-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-1-xl-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-1-xl-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-1-xl-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-1-xl-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-18-1-xl-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    Ensure that the <strong>Workspace </strong>is selected and that under <strong>Editor: Default Formatter</strong>  the <strong>Prettier - Code Formatter</strong> option is chosen.\n<br>\n<br>Now each time you save your code, it should always readjust itself for proper formatting based on the rules we supplied Prettier earlier - remember that you can change the way your code is formatted by changing this rules.\n<br>\n<br>Now to the last step.\n  </p>\n<div><div  style=\"width:750px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs5.html\"></div>&nbsp;\n</div>\n\n  <p>\n    <strong>Step 10: Configure Code Auto Linting:\n<br></strong>\n<br>To ensure our TypeScript code is auto linted, revealing errors or inefficient code block while we type, we need to tell VS Code what we want, similar to what we did for Prettier in the last step.\n<br>\n<br> Go to <strong>File &gt; Preferences &gt; Settings</strong> like we did earlier and type <strong>eslint: probe</strong> into the search box ensuring also that the <strong>Workspace </strong>tab is selected\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/20/2023-08-17-26-xl.webp\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-26-xl-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-26-xl-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-26-xl-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-26-xl-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-26-xl-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/20/responsive/2023-08-17-26-xl-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    Now under <strong>eslint: probe</strong> ensure that <strong>typescript </strong>was included, if not include it using the Add Item button.\n<br>\n<br>And that is it. You're good to go.\n<br>\n<br><strong>Well-done.</strong>\n  </p>\n<div><div  style=\"width:750px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs6.html\"></div>&nbsp;\n</div>\n\n  <p>\n    \n  </p>",
            "author": {
                "name": "Goke Akintoye"
            },
            "tags": [
            ],
            "date_published": "2023-08-22T17:33:06+01:00",
            "date_modified": "2023-08-22T22:22:22+01:00"
        },
        {
            "id": "https://mrkintoye.name.ng/a-beginners-guide-to-setting-up-a-typescript-project.html",
            "url": "https://mrkintoye.name.ng/a-beginners-guide-to-setting-up-a-typescript-project.html",
            "title": "A Beginner&#x27;s Guide To Setting Up A Typescript Project",
            "summary": "6 min TypeScript has gained and is still gaining an enormous following as a programming language. However, beginners sometimes find it difficult to set up their projects, such that appropriate&hellip;",
            "content_html": "\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/tsLogob-2.png\" height=\"770\" width=\"794\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/tsLogob-2-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/tsLogob-2-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/tsLogob-2-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/tsLogob-2-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/tsLogob-2-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/tsLogob-2-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    6 min\n  </p>\n\n  <p>\n    TypeScript has gained and is still gaining an enormous following as a programming language. However, beginners sometimes find it difficult to set up their projects, such that appropriate JavaScript files are generated and bundled. This is necessary because TypeScript is a compiled language normally compiled into JavaScript.\n<br>\n<br>This tutorial will show you an easy and effective way to set up your TypeScript project to both compile and bundle your TypeScript files to be useable either in the node or browser runtime environments.\n<br><br>Let's get started.\n  </p>\n\n  <p>\n    <strong>Prerequisites:</strong>\n  </p>\n\n  <ul>\n    <li>VS Code: I assume you're using VS Code. It makes not only TypeScript but application development generally a lot easier. And it's available for major OSs and also free. You can get it <a href=\"https://code.visualstudio.com/\" target=\"_blank\" class=\"extlink extlink-icon-1\"  >here</a>.</li><li>You may want to check out my other post on Setting up VS Code for TypeScript development <a href=\"#non-existing-post-with-id-2\">here</a>.<br></li><li>You should be able to create a folder on your computer and navigate its directory.<br></li>\n  </ul>\n<div><div  style=\"width:750px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs.html\"></div>&nbsp;</div>\n\n  <p>\n    <strong>Step 1: Create a project folder:</strong>\n<br>\n<br>This is the folder that’ll contain your TypeScript project. You can name it whatever you want for your project. In this write-up, we’ll name our project folder pro_folder. The folder can be in any location on your computer, where you have chosen to save your TypeScript project.\n<br>Step 2: Open the folder in VS Code:\n<br>\n<br>Right-click on the created folder in step 1 (pro_folder) and click on Open with Code. This will open the folder in VS Code editor.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-2.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-2-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-2-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-2-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-2-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-2-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-2-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    On opening, VS Code should look like in the diagram below , with our project folder displayed to the left.\n<br>\n<br><strong>Please note that I'm using a dark theme.</strong>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-3.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-3-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-3-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-3-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-3-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-3-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-3-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    Click the \"Yes, I trust the Authors\" button, and move to the next step in the tutorial.\n  </p>\n<div><div  style=\"width:800px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs1.html\"></div>&nbsp;\n</div>\n\n  <p>\n    <strong>Step 3: Initialize the project:</strong>\n<br>\n<br>Initialize the project from within VS Code Command line tool. To open the Command line tool, from the menu, at the top of VS Code, select Terminal, and then New Terminal. The terminal tool window will open either at the bottom or side of VS Code. Then enter the code below into the window and press Enter key to initialize the project\n  </p>\n<pre class=\"line-numbers  language-html\"><code>npm init -y</code></pre>\n\n  <p>\n    After running the command above, your VS Code setup should look like we have below:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-4.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-4-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-4-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-4-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-4-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-4-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-4-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    Click on the package.json folder to open it. Its content should look as shown below:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-5.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-5-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-5-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-5-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-5-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-5-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-5-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    Now let's move to the next step.\n  </p>\n\n  <p>\n    <strong>Step 4: Install TypeScript:</strong>\n  </p>\n\n  <p>\n    To install the TypeScript compiler, type the following command in the Command line window.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>npm install -g typescript</code></pre>\n\n  <p>\n    Once you have entered the code, remember to press Enter key to run it.\n<br>Afterward, type in the following code to put Typescript as one of your development dependencies.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>npm install -D typescript</code></pre>\n\n  <p>\n    After running the two commands above, TypeScript should now appear in our package.json as a tool our application depends on.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-6.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-6-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-6-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-6-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-6-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-6-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-6-2xl.webp 1920w\">\n      \n    </figure>\n<div><div  style=\"width:800px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs2.html\"></div>&nbsp;\n</div>\n\n  <p>\n    <strong>Step 5: Install Webpack , Webpack CLI tool , TS-Loader and Babel:</strong>\n  </p>\n\n  <p>\n    Webpack will be used to bundle our TypeScript code. To install it type and run the following code.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>npm install -D webpack webpack-cli ts-loader webpack-dev-server</code></pre>\n\n  <p>\n    followed by the command below.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>npm install --save-dev babel-core babel-loader\n</code></pre>\n\n  <p>\n    The package.json file should have been automatically updated after running the above command as shown below:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-15.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-15-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-15-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-15-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-15-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-15-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-15-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    <strong>Step 6: Create a tsconfig.json file:</strong>\n  </p>\n\n  <p>\n    In the VS Code file explorer, place your cursor on the project folder, in this case, called pro_folder, and click on the New File icon. Enter tsconfig.json as the name of the file and press ENTER, and VS Code will open the file automatically. Copy the code below into the created file and save it.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>{\n    \"compilerOptions\": {\n      /* Basic Options */\n      \"target\": \"ES2015\" /* Build to ES2015 */,\n      \"module\": \"ES2015\" /* using ES2015 modules */,\n      \"lib\": [\"es2015\", \"dom\"] /* Using ES2015 features and DOM APIs  */,\n      \"declaration\": true /* Generates corresponding'.d.ts' files. */,\n      \"declarationDir\": \"./dist/typings/\" /* build '.d.ts' files to ./dist/typeings */,\n      \"outDir\": \"./dist/esm/\" /* build to ./dist/esm/ */,\n      \"sourceMap\": true,\n      \"inlineSources\": true\n    },\n    \"files\": [\"./src/index.ts\"],\n    \"include\": [\"./src/**/*.ts\"]\n  }\n</code></pre>\n\n  <p>\n    The tsconfig.json file should now look as shown below:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-8.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-8-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-8-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-8-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-8-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-8-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-8-2xl.webp 1920w\">\n      \n    </figure>\n<div><div  style=\"width:800px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs3.html\"></div>&nbsp;\n</div>\n\n  <p>\n    <strong>Step 7: Create a webpack.config.js file:</strong>\n  </p>\n\n  <p>\n    Following the same steps in step 6 above, create another file named webpack.config.js and copy, paste and save the code below into it.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>const path = require(\"path\");\n\nmodule.exports = (env, argv) =&gt; {\n  return {\n    entry: {\n      index: path.resolve(__dirname, \"./dist/esm/index.js\")\n    },\n    output: {\n      path: path.resolve(__dirname, \"./dist/umd\"), // builds to ./dist/umd/\n      filename: \"[name].js\", // index.js\n      library: \"myLibrary\", // aka window.myLibrary\n      libraryTarget: \"umd\", // supports commonjs, amd and web browsers\n      globalObject: \"this\"\n    },\n    module: {\n      rules: [{ test: /\\.t|js$/, use: \"babel-loader\" }]\n    }\n  };\n};\n</code></pre>\n\n  <p>\n    After carrying out the instruction above, the webpack.config.js file should look something like this:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-9.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-9-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-9-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-9-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-9-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-9-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-9-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    \n  </p>\n\n  <p>\n    <strong>Step 8: Update the package.json file:</strong>\n  </p>\n\n  <p>\n    Add the following code snippet to your package.json:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>  \"main\": \"./dist/umd/index.js\",\n  \"module\": \"./dist/esm/index.js\",\n  \"types\": \"./dist/typings/index.d.ts\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack\",\n    \"prebuild\": \"tsc\"\n  }\n</code></pre>\n\n  <p>\n    The content of the package.json file should now look something like as we have below:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-10.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-10-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-10-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-10-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-10-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-10-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-10-2xl.webp 1920w\">\n      \n    </figure>\n<div><div  style=\"width:800px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs4.html\"></div>&nbsp;\n</div>\n\n  <p>\n    <strong>Step 9: Create The src Folder:</strong>\n  </p>\n\n  <p>\n    It's time to create the src folder. This is the folder that'll hold our TypeScript files. Place your cursor over the PRO_Folder and click the New Folder icon. Enter the name of the folder as src. Our file structure should contain the new folder (src) and look something like the diagram below.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-11.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-11-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-11-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-11-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-11-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-11-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-11-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    <strong>Step 10: Start Developing Your Project:</strong>\n  </p>\n\n  <p>\n    Wao, we've come a long way having put all the tools needed together while setting up our project.\n<br>\n<br>Now we can start writing our TypeScript code. However, since this tutorial is not about learning TypeScript we'll keep the code example very simple.\n<br>\n<br>Let's start by creating two TypeScript files. Since all our TypeScript files are to be placed in the src folder we created earlier, these two files should be placed there.\n<br>\n<br><strong>Please note that though we are using only two files for our example, you are free to use as many TypeScript files as your project might need.</strong>\n  </p>\n<div><div  style=\"width:800px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs5.html\"></div>&nbsp;\n</div>\n\n  <p>\n    <strong>Step 11: Create Your TypeScript Files:</strong>\n  </p>\n\n  <p>\n    We start by creating the first of the two files we want to create for this project and we will name it index.ts. To create this file, right-click on the src folder in the Explorer pane in VS Code, and click on New File, see the diagram below:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-12.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-12-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-12-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-12-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-12-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-12-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-12-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    Copy, paste and save the code below into the index.ts file.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>import {multiplier} from './multiplier';\n</code></pre>\n\n  <p>\n    So that the index.ts file now looks something like below:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-13.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-13-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-13-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-13-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-13-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-13-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-13-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    Using the same method used above for creating the index.ts file, create another file in the src folder and name it multiplier.ts. And copy, paste and save into it the code below.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>export function multiplier(a:number,b:number):number{\n    return a*b;\n}\n</code></pre>\n\n  <p>\n    The multiplier.ts file should now looks something like this:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-14.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-14-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-14-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-14-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-14-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-14-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-14-2xl.webp 1920w\">\n      \n    </figure>\n\n  <p>\n    <strong>Step 12: Build :</strong>\n  </p>\n\n  <p>\n    It's time to build and bundle our TypeScript code into appropriate JavaScript file(s) that we can use either in browse or node-based applications. It all depends on the purpose of your code.\n<br>\n<br>To build and bundle our application, generate a .map file for debugging, and also create a .d.ts file for developers who might want to use your code(if what you are coding is a library for example), run the command below.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>npm run build\n</code></pre>\n\n  <p>\n    If the build process was successful, a folder named dist containing three other folders (namely esm, umd, and typings) will have been created inside your project folder.\n<br>\n<br>The esm folder contains JavaScript code that can be used in node-based applications as well as corresponding .map files; while the umd folder contains the one usable for web browser-based applications. The typings folder on the other hand contains .d.ts files. See the diagram below.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://mrkintoye.name.ng/media/posts/1/2023-08-15-18.png\" height=\"768\" width=\"1366\" alt=\"\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-18-xs.webp 640w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-18-sm.webp 768w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-18-md.webp 1024w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-18-lg.webp 1366w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-18-xl.webp 1600w ,https://mrkintoye.name.ng/media/posts/1/responsive/2023-08-15-18-2xl.webp 1920w\">\n      \n    </figure>\n<div><div  style=\"width:800px; height:auto;display:block;margin-left:auto;margin-right:auto;\"  w3-include-html=\"/ads/adContainers/headerADs6.html\"></div>&nbsp;\n</div>",
            "author": {
                "name": "Goke Akintoye"
            },
            "tags": [
                   "Webpack",
                   "VS Code",
                   "UMD",
                   "TypeScript Project",
                   "TypeScript Build",
                   "TypeScript",
                   "Project",
                   "JavaScript",
                   "ESM",
                   "Build",
                   "Babel"
            ],
            "date_published": "2023-08-16T15:08:49+01:00",
            "date_modified": "2023-08-24T11:28:20+01:00"
        }
    ]
}
